services:
  backend:
    platform: linux/amd64
    env_file:
      - prod.env
    build:
      context: .
      dockerfile: backend/Dockerfile.backend
    volumes:
      - ${COMPOSE_PROJECT_PATH:-.}:/app
      - /app/node_modules  # Ensures node_modules is created inside the container
    depends_on:
      database:
        condition: service_healthy
    networks:
      - internal


  frontend:
    platform: linux/amd64
    env_file:
      - prod.env
    build:
      context: .
      dockerfile: frontend/Dockerfile.frontend
    volumes:
      - ${COMPOSE_PROJECT_PATH:-.}:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - internal

  database:
    image: postgres:17
    container_name: postgres_container
    restart: always
    env_file:
      - prod.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:  # Ensures database is ready before backend starts
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
      timeout: 3s
    networks:
      - internal
  
  proxy:
    image: nginx:latest
    ports:
      - "80:80"    # External HTTP
      - "443:443"  # External HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt
    restart: always
    depends_on:
      - frontend
    networks:
      - internal

volumes:
  postgres_data:

networks:
  internal:
    driver: bridge